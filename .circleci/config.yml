version: 2.1

jobs:
  build:
    docker:
      - image: circleci/openjdk:11-jdk-stretch

    steps:
      - checkout

      - run: |
          echo "$(git tag -l --points-at HEAD)" > ~/circle_tag.txt

      - restore_cache:
          key: circleci-werekitten-{{ checksum "pom.xml" }}

      - run: mvn dependency:go-offline

      - save_cache:
          paths:
            - ~/.m2
          key: circleci-werekitten-{{ checksum "pom.xml" }}

      - run: mvn package

      - store_test_results:
          path: target/surefire-reports

      - persist_to_workspace:
          root: ~/
          paths: circle_tag.txt

  build-mac-installer:
    macos:
      xcode: 11.2.0

    steps:
      - checkout

      - run:
          name: Install dependencies
          command: |
            HOMEBREW_NO_AUTO_UPDATE=1 brew install wget

      - run:
          name: Run build
          command: |
            ./install_corretto_jdk_osx.sh
            ./install_maven_osx.sh
            ./download_jdk_osx.sh
            ./package_osx.sh

      - store_artifacts:
          path: ./target/jpackage-app/WereKitten-1.0.dmg
          destination: WereKitten-1.0.dmg

      - persist_to_workspace:
          root: ~/
          paths: project/target/jpackage-app/WereKitten-1.0.dmg

  build-windows-installer:
    machine:
      image: "windows-server-2019-vs2019:stable"
      resource_class: "windows.medium"
      shell: bash.exe
    steps:
      - checkout

      - restore_cache:
          keys:
            - circle-packages-{{ checksum ".circleci/config.yml" }}

      - run:
          name: Install nuget dependencies
          command: |
            nuget install WiX.Toolset -Version 3.9.1208.0

      - run:
          name: Install chocolatey dependencies
          command: |
            choco install maven --version 3.6.2
            choco install correttojdk wget

      - run:
          name: Download experimental JDK with jpackage in it
          command: ./download_jdk_win64.sh

      - save_cache:
          paths:
            - jdk-14
          key: circle-packages-{{ checksum ".circleci/config.yml" }}

      - run:
          name: Build app + installer
          command: |
            export PATH=/c/Users/circleci/project/Wix.Toolset.3.9.1208.0/tools/wix:$PATH
            ./package_win64.sh

      - store_artifacts:
          path: .\target\jpackage-app\WereKitten-1.0.msi
          destination: WereKitten-1.0.msi

      - run:
          name: Test installer
          shell: powershell.exe
          command: |
            Start-Process msiexec.exe -Wait -ArgumentList '/I C:\Users\circleci\project\target\jpackage-app\WereKitten-1.0.msi /quiet /L*V msilog.txt'
            if(![System.IO.File]::Exists('C:\Program Files\WereKitten\WereKitten.exe')){throw (New-Object System.IO.FileNotFoundException("Installed file not found!"))}

      - store_artifacts:
          path: msilog.log
          destination: msilog.log

      - persist_to_workspace:
          root: ~/
          paths: project\target\jpackage-app\WereKitten-1.0.msi

  publish-github-release:
    docker:
      - image: cibuilds/github:0.10
    steps:
      - attach_workspace:
          at: ./artifacts
      - run:
          name: "Publish Release on GitHub"
          command: |
            CIRCLE_TAG="$(cat ./artifacts/circle_tag.txt)"
            rm -f ./artifacts/circle_tag.txt
            echo "CIRCLE_TAG=${CIRCLE_TAG}"

            ghr -t "${GITHUB_TOKEN}" \
                -u "${CIRCLE_PROJECT_USERNAME}" \
                -r "${CIRCLE_PROJECT_REPONAME}" \
                -c "${CIRCLE_SHA1}" \
                -replace \
                "${CIRCLE_TAG}" \
                "/root/project/artifacts/project/target/jpackage-app/"

release-filter: &release-filter
  filters:
    # ignore any commit on any branch by default
    branches:
      ignore: /.*/
    # only act on version tags
    tags:
      only: /^v\d+\.\d+\.\d+$/

workflows:
  version: 2
  build_release:
    jobs:
      - build:
          filters:
            tags:
              only: /.*/
      - build-mac-installer:
          <<: *release-filter
          requires:
            - build
      - build-windows-installer:
          <<: *release-filter
          requires:
            - build
      - publish-github-release:
          <<: *release-filter
          requires:
            - build-mac-installer
            - build-windows-installer
